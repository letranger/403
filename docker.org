#+TITLE: Docker
# -*- org-export-babel-evaluate: nil -*-'
#+TAGS: 403, TNFSH, Docker
#+OPTIONS: toc:2 ^:nil num:5
#+PROPERTY: header-args :eval never-export
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/muse.css" />
#+begin_export html
<a href="https://hits.sh/letranger.github.io/403/docker.html/"><img align="right" alt="Hits" src="https://hits.sh/letranger.github.io/403/docker.html.svg?style=plastic"/></a>
#+end_export


* Install Ubuntu on Mac
1. Download Ubuntu ISO
2. Open Disk Utility, Create 1 Partition to Mac OS Extended (Journaled) for USB Stick.
3. Click the *Options* Button and ensure that GUID Partition Table is selected and then click OK.
4. Open Terminal and enter the following commands
   1) Convert ISO to IMG
      #+begin_src shell -r :results output :exports both
hdiutil convert -format UDRW -o ~/path/to/target.img ~/path/to/ubuntu.iso
      #+end_src
   2) Find USB disk Number and unmount it
      #+begin_src shell -r :results output :exports both
diskutil list
diskutil unmountDisk /dev/diskN
      #+end_src
   3) Create bootable USB
      #+begin_src shell -r :results output :exports both
sudo dd if=/path/to/downloaded.img of=/dev/diskN bs=1m
      #+end_src
   4) Install
* 安裝MariaDB Galera Cluster
- [[https://cloudinfrastructureservices.co.uk/how-to-setup-mariadb-clustering-on-ubuntu-20-04/][How to Setup Mariadb Clustering on Ubuntu 20.04]]
** 安裝系統
*** Installing MariaDB on ALL Nodes
   #+begin_src shell -r :results output :exports both
sudo apt install mariadb-server -y
sudo systemctl start mariadb
sudo mysql_secure_installation
   #+end_src
** 設定50-server.cnf
#+begin_src shell -r :results output :exports both
sudo emacs /etc/mysql/mariadb.conf.d/50-server.cnf
#+end_src
Comment the bind line on the file /etc/mysql/mariadb.conf.d/50-server.cnf which binds MariaDB service to 127.0.0.1
#+begin_src shell -r :results output :exports both
# Instead of skip-networking the default is now to listen only on
## localhost which is more compatible and is not less secure.
#bind-address            = 127.0.0.1
#+end_src
** 設定galera.cnf
1. Configuring the *First* Node
   #+begin_src shell -r :results output :exports both
sudo emacs /etc/mysql/conf.d/galera.cnf
   #+end_src
   #+begin_src shell -r :results output :exports both
[mysqld]
binlog_format=ROW
default-storage-engine=innodb
innodb_autoinc_lock_mode=2
innodb_locks_unsafe_for_binlog=1
innodb_doublewrite=1
#bind-address=0.0.0.0

# Galera Provider Configuration
wsrep_on=ON
wsrep_provider=/usr/lib/galera/libgalera_smm.so

# Galera Cluster Configuration
wsrep_provider_options="gcache.size=256M; gcache.page_size=128M"
wsrep_cluster_name="TNFSH_DB_Cluster"
wsrep_cluster_address="gcomm://192.168.16.41, 192.168.16.42, 192.168.16.43, 192.168.16.44, 192.168.16.45, 192.168.16.46, 192.168.16.47, 192.168.16.48, 192.168.16.49"

# Galera Synchronization Configuration
wsrep_sst_method=rsync

# Galera Node Configuration
wsrep_node_address="192.168.16.41"
wsrep_node_name="TNFSH_DB01"

   #+end_src
3. Configuring the *Second* Node
   #+begin_src shell -r :results output :exports both
sudo emacs /etc/mysql/conf.d/galera.cnf
   #+end_src
   #+begin_src shell -r :results output :exports both
[mysqld]
binlog_format=ROW
default-storage-engine=innodb
innodb_autoinc_lock_mode=2
innodb_locks_unsafe_for_binlog=1
innodb_doublewrite=1
#bind-address=0.0.0.0

# Galera Provider Configuration
wsrep_on=ON
wsrep_provider=/usr/lib/galera/libgalera_smm.so

# Galera Cluster Configuration
wsrep_provider_options="gcache.size=256M; gcache.page_size=128M"
wsrep_cluster_name="TNFSH_DB_Cluster"
wsrep_cluster_address="gcomm://192.168.16.41, 192.168.16.42, 192.168.16.43, 192.168.16.44, 192.168.16.45, 192.168.16.46, 192.168.16.47, 192.168.16.48, 192.168.16.49"

# Galera Synchronization Configuration
wsrep_sst_method=rsync

# Galera Node Configuration
wsrep_node_address="192.168.16.42"
wsrep_node_name="TNFSH_DB02"
   #+end_src
5. Starting the Galera Cluster
   1) Stop MariaDB on ALL Nodes and make sure MariaDB service is stopped
      #+begin_src shell -r :results output :exports both
sudo systemctl stop mariadb
sudo systemctl status mariadb
      #+end_src
   2) Start the *First* Node
      #+begin_src shell -r :results output :exports both
sudo galera_new_cluster
      #+end_src
   3) Make sure the cluster status
      #+begin_src shell -r :results output :exports both
mysql -u root -p -e "SHOW STATUS LIKE 'wsrep_cluster_size'"
      #+end_src
   4) Start the *Second* Node
      #+begin_src shell -r :results output :exports both
sudo systemctl start mariadb
      #+end_src
   5) Make sure the cluster status
      #+begin_src shell -r :results output :exports both
mysql -u root -p -e "SHOW STATUS LIKE 'wsrep_cluster_size'"
      #+end_src
   6) Start the *Third* Node
      #+begin_src shell -r :results output :exports both
sudo systemctl start mariadb
      #+end_src
   7) Make sure the cluster status
      #+begin_src shell -r :results output :exports both
mysql -u root -pilov1tnfsh -e "SHOW STATUS LIKE 'wsrep_cluster_size'"
      #+end_src
** 驗證Verify Replication
   1) Create a Database and Table on the First Node
      #+begin_src shell -r :results output :exports both
mysql -u root -p
CREATE DATABASE classdb;
      #+end_src
   2) Create a table named students
      #+begin_src shell -r :results output :exports both
USE classdb;
CREATE TABLE students (id int, name varchar(20), surname varchar(20));
      #+end_src
   3) Insert some data into studetns table:
      #+begin_src shell -r :results output :exports both
INSERT INTO students VALUES (1,"郭小如","Ruby");
INSERT INTO students VALUES (2,"顏小哲","James");
INSERT INTO students VALUES (3,"顏小帆","Vanessa");
      #+end_src
   4) Verify the inserted data with the following command:
      #+begin_src shell -r :results output :exports both
SELECT * FROM students;
      #+end_src
7. Verify Replication on the Second and Third Node
   #+begin_src shell -r :results output :exports both
mysql -u root -p
SHOW DATABASES;
USE classdb;
SELECT * FROM students;
   #+end_src
   Insert some data on *Second* Node
   #+begin_src shell -r :results output :exports both
INSERT INTO students VALUES (4,"顏小進","Letranger");
   #+end_src
   Verify on other nodes
* MariaDB Galera問題處理
- [[https://www.cnblogs.com/nulige/articles/8470001.html][問題處理 ]]太好了
- [[https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster/][Getting Started with MariaDB Galera Cluster]]
** 重新啟動後,其他node無法join
- 正常第一次启动集群，使用命令：galera_new_cluster
- 整個集群關閉後，再重新啟動，則打開任一主機，輸入命令：
  #+begin_src shell -r :results output :exports both
sudo emacs /var/lib/mysql/grastate.dat
  #+end_src
  將seqno改為1
  #+begin_src shell -r  :results output :exports both
#GALERA savedd state
version:2.1
uuid: 自己的cluster id
seqno: -1
safe_to_bootstrap:0
  #+end_src
  啟動 galera_new_cluster，這是master
  其他node則用systemctl start mariadb啟動
** master無法galera_new_cluster
狀況:
#+begin_src shell -r :results output :exports both
[db1]# galera_new_cluster
Job for mariadb.service failed because the control process exited with error code.
See "systemctl status mariadb.service" and "journalctl -xe" for details.
#+end_src
  #+begin_src shell -r  :results output :exports both
sudo emacs /var/lib/mysql/grastate.dat
  #+end_src
  將safe_to_bootstrap改為1
  #+begin_src shell -r :results output :exports both
#GALERA savedd state
version:2.1
uuid: 自己的cluster id
seqno: -1
safe_to_bootstrap:0
  #+end_src
* 移除MariaDB
#+begin_src shell -r  :results output :exports both
sudo systemctl stop mariadb
sudo apt remove 'mariadb*' -y
sudo apt purge 'mariadb*' -y
sudo apt remove 'mysql*' -y
sudo apt purge 'mysql*' -y
sudo apt autoremove -y
sudo apt autoclean -y
sudo apt update -y
sudo apt upgrade -y
sudo apt autoremove
sudo apt-get --fix-broken install
sudo rm -rf /etc/mysql /var/lib/mysql
sudo reboot
#+end_src
* 架設haproxy
- [[https://gary840227.medium.com/mariadb-cluster-f7220e9eaac8][如何建置 MariaDb Galera Cluster]]
** 移除
#+begin_src shell -r :results output :exports both
sudo apt remove haproxy -y
sudo apt purge haproxy -y
sudo apt autoclean -y
sudo apt autoremove -y
sudo rm -rf /etc/haproxy
#+end_src
** 安裝
#+begin_src shell -r :results output :exports both
sudo apt install haproxy -y
#+end_src
** 編輯haproxy.cfg
#+begin_src shell -r :results output :exports both
sudo emacs /etc/haproxy/haproxy.cfg
#+end_src
內容如下:
#+begin_src shell -r :results output :exports both
global
         # log required rsyslog         log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s        # user and group will be run as
        user haproxy
        group haproxy
        daemon

# Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

# Default ciphers to use on SSL-enabled listening sockets.
# For more information, see ciphers(1SSL). This list is from:
#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
# An alternative list with additional directives can be obtained from https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxyssl-default-bind-ciphersECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSSssl-default-bind-options no-sslv3
defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

listen galera
    bind 192.168.16.40:3306
    balance roundrobin #  load balancer policy
    mode tcp # (tcp 設置為 layer 7 , http 為 layer 4)
    option tcpka # enable keepalive to maintain tcp connection
    option mysql-check user haproxy # enable database server check
    server TNFSH_DB01 192.168.16.41:3306 check weight 1
    server TNFSH_DB02 192.168.16.42:3306 check weight 1
    server TNFSH_DB03 192.168.16.43:3306 check weight 1
    server TNFSH_DB04 192.168.16.44:3306 check weight 1
    server TNFSH_DB05 192.168.16.45:3306 check weight 1

listen stats
   bind 0.0.0.0:9000
   mode http
   stats enable # 啟用狀態
   stats uri /stats   # 網址路徑
   stats realm HAProxy\ Statistics
   stats auth howtoforge:howtoforge # 設定帳號密碼
   stats admin if TRUE # 設定使用者登入後為管理者
   stats refresh 30s # 每 30 秒刷新監控畫面
#+end_src
** 重啟haproxy
#+begin_src shell -r :results output :exports both
sudo systemctl restart haproxy
#+end_src
觀察 http://192.168.16.40:9000/stats
帳密: howtoforge / howtoforge
** 建立mysql-check user
於任一node
#+begin_src shell -r :results output :exports both
sudo mysql -u root -pilov1tnfsh
create user 'haproxy'@'192.168.16.40'; # 帳號@ip
flush privileges;
#+end_src
** 測試
測試 haproxy 是否將我們導向不同的 mariadb , 我們對每個節點的 mariadb 設定專屬的 server-id
#+begin_src shell -r :results output :exports both
sudo mysql -h192.168.16.40 -uroot -pilov1tnfsh -e "SET GLOBAL server_id=161"
sudo mysql -h192.168.16.40 -uroot -pilov1tnfsh -e "SET GLOBAL server_id=162"
sudo mysql -h192.168.16.40 -uroot -pilov1tnfsh -e "SET GLOBAL server_id=163"
sudo mysql -h192.168.16.40 -uroot -pilov1tnfsh -e "SET GLOBAL server_id=164"
sudo mysql -h192.168.16.40 -uroot -pilov1tnfsh -e "SET GLOBAL server_id=165"
#+end_src
** 架設Load Balance（HA Proxy）
1. 關閉防火牆
   #+begin_src shell -r :results output :exports both
   sudo ufw disable
   sudo ufw status
   #+end_src
2. 安裝HA Proxy
   #+begin_src shell -r :results output :exports both
   sudo apt install haproxy
   #+end_src
3. 建立與設定clustercheck
   1) 於MariaDB 所有Nodes下載並設定clustercheck，將檔案放在/usr/bin下，設定可執行權限
      #+begin_src shell -r :results output :exports both
      git clone https://github.com/olafz/percona-clustercheck
      cd percona-clustercheck
      cd clustercheck
      chmod 755 clustercheck
      sudo mv clustercheck /usr/bin
      ls -al /usr/bin/clustercheck
      #+end_src
   2) 為clustercheck建一組檢查用的mysql帳號
      #+begin_src shell -r :results output :exports both
mysql -u root -p
GRANT PROCESS ON *.* TO 'clustercheckuser'@'localhost' IDENTIFIED BY 'clustercheckpassword!' ;
FLUSH PRIVILEGES;
      #+end_src
4. 於MariaDB所有Nodes安裝與設定xinetd
   讓clustercheck可以透過網路執行
   1) 安裝xinetd
      #+begin_src shell -r :results output :exports both
      sudo apt install xinetd
      #+end_src
   2) 設定xinetd
      #+begin_src shell -r :results output :exports both
sudo emacs /etc/xinetd.d/mysqlchk
      #+end_src
      內容:
      #+begin_src shell -r :results output :exports both
      # default: on
      # description: mysqlchk
      service mysqlchk
      {
             disable = no
             flags = REUSE
             socket_type = stream
             port = 9200
             wait = no
             user = nobody
             server = /usr/bin/clustercheck
             log_on_failure += USERID
             only_from = 0.0.0.0/0
             per_source = UNLIMITED
      }
      #+end_src
   3) 調整services
      在上方中，我們設定了9200來當我們觸發xinetd的Port，所以要在/etc/services裡做一下調整，編輯 /etc/services來調整，取消原本的9200，加入我們新增的mysqlchk
      #+begin_src shell -r :results output :exports both
      mysqlchk        9200/tcp                        #Galera Clustercheck
      #+end_src
   4) 啟動xinetd
      #+begin_src shell -r :results output :exports both
      sudo /etc/init.d/xinetd start
      #+end_src
   5) 設定xinetd重啟動後自動啟動
      #+begin_src shell -r :results output :exports both
      sudo pdate-rc.d xinetd defaults
      #+end_src
      server TNFSH_DB03 192.168.16.43:3306 check port 9200 weight 1
      server TNFSH_DB04 192.168.16.44:3306 check port 9200 weight 1
      server TNFSH_DB05 192.168.16.45:3306 check port 9200 weight 1
   6) 測試
      #+begin_src shell -r :results output :exports both
      telnet localhost 9200
      #+end_src
      結果
      #+begin_src shell -r :results output :exports both
      Trying 127.0.0.1...
      Connected to localhost.
      Escape character is '^]'.
      HTTP/1.1 503 Service Unavailable
      Content-Type: text/plain
      Connection: close
      Content-Length: 44

      Percona XtraDB Cluster Node is not synced.
      Connection closed by foreign host.
      #+end_src

5. Install the latest HAProxy using a PPA
   #+begin_src shell -r :results output :exports both
sudo apt install --no-install-recommends software-properties-common
sudo add-apt-repository ppa:vbernat/haproxy-2.4 -y
sudo apt install haproxy=2.4.\*
   #+end_src
5. Update and upgrade
   #+begin_src shell -r :results output :exports both
sudo apt update
sudo apt upgrade -y
   #+end_src
5. 設定HA Proxy
   1) 編輯/etc/haproxy/haproxy.cfg
   2) 刪除原本內容
   3) 加入
      #+begin_src shell -r :results output :exports both
global
       log 127.0.0.1   local0
       log 127.0.0.1   local1 notice
       maxconn 1024
       user haproxy
       group haproxy
       daemon
defaults
       log     global
       mode    http
       option  tcplog
       option  dontlognull
       retries 3
       option  redispatch
       maxconn 1024
       timeout connect 5000ms
       timeout client 50000ms
       timeout server 50000ms
listen mariadb_cluster_writes 0.0.0.0:13304
## A failover pool for writes to ensure writes only hit one node at a time.
       mode tcp
       option httpchk
       server galera-node01 192.168.16.41:3306 check port 9200
       server galera-node02 192.168.16.42:3306 check port 9200 backup
listen mariadb_cluster_reads 0.0.0.0:13305
## A load-balanced pool for reads to utilize all nodes for reads.
       mode tcp
       balance leastconn
       option httpchk
       server galera-node01 192.168.16.41:3306 check port 9200
       server galera-node02 192.168.16.42:3306 check port 9200
listen stats 0.0.0.0:9000
## HAProxy stats web gui.
       mode http
       stats enable
       stats uri /haproxy_status
       stats realm HAProxy\ Statistics
       stats auth haproxy:haproxy
       stats admin if TRUE
      #+end_src
6. 內容說明
   1) Writer connection（寫入連線）：寫入連線要保持在同一台，也就是說不管有幾台機器連透過「寫入連線」的方式連入時，都要導到同一台機器；不過當機器有問題時，也能夠進行failover，下方大概解釋一下設定。
      - listen mariadb_cluster_writes 0.0.0.0:13304
        說明：宣告監聽(listen)，名稱為mariadb_cluster_writes，開放任意IP連入13304 Port(0.0.0.0:13304)。
      - mode tcp
        說明：使用tcp或http方式連入，這邊設定是tcp。
      - option httpchk
        說明：HA Proxy在確認後方的資料庫時，透過HTTP方式來判斷後端是否正常。
      - server galera-node01 192.168.43.101:3306 check port 9200
        說明：宣告server，server的暱稱為 galera-node01，實稱上的IP與Port是 192.168.43.101:3306，確認正常與否的Port是9200。
      - server galera-node02 192.168.43.102:3306 check port 9200 backup
        說明：基本上與d是一樣的，不過最後多了一個backup，意思是當正常的機器有問題時，才將連線導至這一台server，如果沒有這個backup的話，HA Proxy會實行分流，可能會導到不同的server，請注意。
   2) Read connection（讀取連線）：讀取時不導到特定一台機器，只是單純實行Load Balance功能，這邊的設定跟讀取的設定有三點不太一樣，說明如下：
      - listen mariadb_cluster_writes 0.0.0.0:13305
        說明：我們在Read connection中設定13305的Port。
      - balance leastconn
        說明：分流的方式之一，將使用者導到最少人連線的server。
      - server無backup說定
        說明：因為server中無backup的設定，所以會實作分流。
   3) 網頁監看：這一個設定只是單純讓使用者在網頁上可以看到MariaDB的狀態。
      - listen stats 0.0.0.0:9000
        說明：宣告監聽(listen)，名稱為stats ，開放任意IP連入9000 Port(0.0.0.0:9000)。
      - mode http
        說明：使用tcp或http方式連入，這邊設定是http。
      - stats enable
        說明：設定狀態為啟用。
      - stats uri /haproxy_status
        說明：設定HTTP的URL，所以我們等一下要連入的網址是http://IP:9000/haproxy_status。
      - stats realm HAProxy\ Statistics
        說明：設定使用者連線時，在輸入帳號密碼的視窗標題，通常會搭配下方的stats auth設定使用。
      - stats auth haproxy:haproxy
        說明：設定使用者連線時的帳號密碼。
      - stats admin if TRUE
        說明：設定使用者連線後的角色為管理員角色；管理員與一般使用者的差別在於－管理員角色有權限在網頁上針對HA Proxy上管理的伺服器做一些動作。
  7. 啟動與測試HA Proxy
     #+begin_src shell -r :results output :exports both
service haproxy start
     #+end_src
* 監測haproxy
** references
- [[https://codertw.com/%E4%BC%BA%E6%9C%8D%E5%99%A8/144308/][使用Prometheus Grafana監控MySQL實踐]]
- [[https://www.gushiciku.cn/pl/p9ZR/zh-tw][Prometheus+Grafana 基礎及簡單搭建]]
- [[https://www.lisenet.com/2021/monitor-haproxy-with-grafana-and-prometheus-haproxy_exporter/][Monitor HAProxy with Grafana and Prometheus (haproxy_exporter)]]
- [[https://ithelp.ithome.com.tw/articles/10209805][[Day 30] Prometheus & Intermission ]]
** 大量加入mysql資料
#+begin_src shell -r  :results output :exports both
CREATE TABLE `data3`
(
  `id`         bigint(20) NOT NULL      AUTO_INCREMENT,
  `datetime`   timestamp  NULL          DEFAULT CURRENT_TIMESTAMP,
  `channel`    int(11)                  DEFAULT NULL,
  `value`      float                    DEFAULT NULL,

  PRIMARY KEY (`id`)
);


DELIMITER $$
CREATE PROCEDURE generate_data3()
BEGIN
  DECLARE i INT DEFAULT 0;
  WHILE i < 500000 DO
    INSERT INTO `data3` (`datetime`,`value`,`channel`) VALUES (
      FROM_UNIXTIME(UNIX_TIMESTAMP('2014-01-01 01:00:00')+FLOOR(RAND()*31536000)),
      ROUND(RAND()*100,2),
      1
    );
    SET i = i + 1;
  END WHILE;
END$$
DELIMITER ;

CALL generate_data3();
#+end_src
** 被監控端
1. install go
2. download node_exporter
3. 解壓至/usr/local
4. 執行node_exporter
5. download mysqld_exporter
6. 解壓至/usr/local
7. 編輯.my.cnf
8. 執行mysqld_exporter
#+begin_src shell -r :results output :exports both
[client]
user=root
password=ilov1tnfsh
#+end_src
#+begin_src shell -r  :results output :exports both
cd ~
sudo snap install go --classic
wget https://github.com/prometheus/node_exporter/releases/download/v0.14.0/node_exporter-0.14.0.linux-amd64.tar.gz
sudo  tar xvf node_exporter-0.14.0.linux-amd64.tar.gz -C /usr/local/
nohup /usr/local/node_exporter-0.14.0.linux-amd64/node_exporter &
wget https://github.com/prometheus/mysqld_exporter/releases/download/v0.10.0/mysqld_exporter-0.10.0.linux-amd64.tar.gz
sudo tar xvf mysqld_exporter-0.10.0.linux-amd64.tar.gz -C /usr/local/
sudo emacs /usr/local/mysqld_exporter-0.10.0.linux-amd64/.my.cnf
/usr/local/mysqld_exporter-0.10.0.linux-amd64/mysqld_exporter -config.my-cnf="/usr/local/mysqld_exporter-0.10.0.linux-amd64/.my.cnf" &
#+end_src
** 把node_exporter改為service自動執行
#+begin_src shell -r :results output :exports both
[Unit]
Description=Prometheus Node Exporter
After=network.target
User=prometheus
Group=prometheus

[Service]
Type=simple
Restart=always
ExecStart=nohup /usr/local/node_exporter-0.14.0.linux-amd64/node_exporter &

[Install]
WantedBy=multi-user.target

#+end_src
#+begin_src shell -r :results output :exports both
sudo emacs /etc/systemd/system/node_exporter.service
sudo systemctl daemon-reload
sudo systemctl enable node_exporter
sudo systemctl start node_exporter
#+end_src
** 把mysqld_exporter改為service自動執行
https://computingforgeeks.com/install-and-configure-prometheus-mysql-exporter-on-ubuntu-centos/
mysql_exporter.service
#+begin_src shell -r :results output :exports both
[Unit]
Description=Prometheus MySQL Exporter
After=network.target
User=prometheus
Group=prometheus

[Service]
Type=simple
Restart=always
ExecStart=/usr/local/mysqld_exporter-0.10.0.linux-amd64/mysqld_exporter -config.my-cnf="/usr/local/mysqld_exporter-0.10.0.linux-amd64/.my.cnf"

[Install]
WantedBy=multi-user.target

#+end_src
#+begin_src shell -r :results output :exports both
sudo emacs /etc/systemd/system/mysqld_exporter.service
sudo systemctl daemon-reload
sudo systemctl enable mysqld_exporter
sudo systemctl start mysqld_exporter
#+end_src
安泰 112 2 5 綁約日期
409922  剩餘本金
2.45    目前利率
8000    違約金
月付金不超過2倍，一個月可以還，

富邦的每月還款是由台新自動扣款，不要匯到富邦，匯到台新去扣
#+RESULTS:
* Prometheus
** 把node_exporter改為service自動執行
#+begin_src shell -r :results output :exports both
[Unit]
Description=Prometheus Node Exporter
After=network.target
User=prometheus
Group=prometheus

[Service]
Type=simple
Restart=always
ExecStart=nohup /usr/local/node_exporter-0.14.0.linux-amd64/node_exporter &

[Install]
WantedBy=multi-user.target

#+end_src
#+begin_src shell -r :results output :exports both
sudo emacs /etc/systemd/system/node_exporter.service
sudo systemctl daemon-reload
sudo systemctl enable node_exporter
sudo systemctl start node_exporter
#+end_src
* phpmyadmin
- [[https://www.webteach.tw/?p=3347][[ Phpmyadmin ] – 透過 Phpmyadmin 一次管理多台遠端資料庫]]
- [[https://lucas-yang.vercel.app/post/local-phpmyadmin-connect-to-remote-mysql/][使用本地 phpMyAdmin 連線到遠端 MySQL 資料庫]]
- [[https://www.itread01.com/content/1542887646.html][配置phpmyadmin連線遠端 MySQL資料庫]]
* Nginx v.s. Moodle
** 移除套件
#+begin_src shell -r :results output :exports both
sudo systemctl stop nginx
sudo apt remove nginx php-fpm php-common php-mysql php-gmp php-curl php-intl php-mbstring php-soap php-gd php-xml php-cli  -y
sudo apt purge nginx php-fpm php-common php-mysql php-gmp php-curl php-intl php-mbstring php-soap php-gd php-xml php-cli  -y
sudo apt autoremove
sudo apt autoclean
#+end_src
** 安裝套件
#+begin_src shell -r :results output :exports both
sudo apt install nginx php-fpm php-common php-mysql php-gmp php-curl php-intl php-mbstring php-soap php-gd php-xml php-cli php-zip unzip git curl -y
#+end_src
** 編輯php.ini
#+begin_src shell -r :results output :exports both
sudo emacs /etc/php/8.0/fpm/php.ini
#+end_src
更改內容
#+begin_src shell -r :results output :exports both
memory_limit = 256M
cgi.fix_pathinfo = 0
upload_max_filesize = 100M
max_execution_time = 360
date.timezone = "Asia/Taipei"
#+end_src
重新啟動php
#+begin_src shell -r :results output :exports both
sudo systemctl restart php8.0-fpm
#+end_src
** 安裝Moodle
*** Download
#+begin_src shell -r :results output :exports both
cd /opt
sudo git clone git://git.moodle.org/moodle.git
cd moodle
sudo git branch -a
sudo git branch --track MOODLE_39_STABLE origin/MOODLE_39_STABLE
sudo git checkout MOODLE_39_STABLE
#+end_src

#+begin_src shell -r :results output :exports both
cd /var/www/html
git clone -b
#+end_src
*** 建立目錄
#+begin_src shell -r :results output :exports both
sudo cp -R /opt/moodle /var/www/html/
sudo chown -R www-data:www-data /var/www/html/moodle

sudo mkdir -p /var/www/html/moodledata
sudo chmod -R 755 /var/www/html/*
sudo chown www-data:www-data /var/www/html/moodledata

#+end_src
GRANT ALL PRIVILEGES ON *.* TO 'moodle'@'%' WITH GRANT OPTION;
FLUSH PRIVILEGES;
https://dotblogs.com.tw/supershowwei/2016/10/23/231423
*** 設定Nginx for Moodle
#+begin_src shell -r :results output :exports both
sudo emacs /etc/nginx/conf.d/moodle.conf
#+end_src
內容
#+begin_src shell -r :results output :exports both
server {
    listen 80;
    root /var/www/html/moodle;
    index  index.php index.html index.htm;
    server_name web;

    client_max_body_size 100M;
    autoindex off;
    location / {
        try_files $uri $uri/ =404;
    }

    location /dataroot/ {
      internal;
      alias /var/www/html/moodledata/;
    }

    location ~ [^/].php(/|$) {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}
Save and close the file then verify the Nginx for any syntax error with the following command:
#+begin_src shell -r :results output :exports both
sudo nginx -t
#+end_src
#+end_src
restart
#+begin_src shell -r :results output :exports both
sudo systemctl restart nginx
#+end_src
* Docker commands
** List comtainer
list running containers
#+begin_src shell -r :results output :exports both
docker container ls
#+end_src
** commit
create a new image _nwImageName_ from that container
#+begin_src shell -r :results output :exports both
docker commit CONTAINER_ID newImageName
#+end_src
** run
star a container from image
#+begin_src shell -r :results output :exports both
docker run newImageName
#+end_src
** duplicate
duplicate running container nginix:latest to container _newContainer_ containing image _newImage_
#+begin_src shell -r :results output :exports both
docker run --name newContainer --volumes-from newImage -d -p 3000:80 nginix:latest
#+end_src
* References
- [[https://stackoverflow.com/questions/49193307/how-to-duplicate-running-docker-container][How to duplicate running docker container]]
- [[https://www.youtube.com/watch?v=mPquwpxyUQU][Docker 10分钟快速入门]]
